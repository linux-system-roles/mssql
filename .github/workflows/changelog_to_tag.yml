---
# yamllint disable rule:line-length
name: Tag, release, and publish role based on CHANGELOG.md push
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
    paths:
      - CHANGELOG.md
permissions:
  contents: read
jobs:
  tag_release_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install dependencies
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt install -y git
          pip install --upgrade pip galaxy-importer ansible-core 'pyyaml<6,>=5.4.1' ruamel_yaml

      - name: Setup Python
        uses: actions/setup-python@v5

      - name: checkout PR
        uses: actions/checkout@v4
        with:
          path: mssql

      - name: checkout auto-maintenance
        uses: actions/checkout@v4
        with:
          repository: linux-system-roles/auto-maintenance
          path: auto-maintenance

      - name: Get tag and message from the latest CHANGELOG.md commit
        id: tag
        run: |
          set -euxo pipefail
          pushd mssql
          print=false
          while read -r line; do
              if [[ "$line" =~ ^\[([0-9]+\.[0-9]+\.[0-9]+)\]\ -\ [0-9-]+ ]]; then
                  if [ "$print" = false ]; then
                      _tagname="${BASH_REMATCH[1]}"
                      echo "$line"
                      print=true
                  else
                      break
                  fi
              elif [ "$print" = true ]; then
                  echo "$line"
              fi
          done < CHANGELOG.md > ./.tagmsg.txt
          git fetch --all --tags
          for t in $( git tag -l ); do
              if [ "$t" = "$_tagname" ]; then
                  echo INFO: tag "$t" already exists
                  exit 1
              fi
          done
          # Get name of the branch that the change was pushed to
          _branch="${GITHUB_REF_NAME:-}"
          if [ "$_branch" = master ] || [ "$_branch" = main ]; then
              echo Using branch name ["$_branch"] as push branch
          else
              echo WARNING: GITHUB_REF_NAME ["$_branch"] is not main or master
              _branch=$( git branch -r | grep -o 'origin/HEAD -> origin/.*$' | \
                         awk -F'/' '{print $3}' || : )
          fi
          if [ -z "$_branch" ]; then
              _branch=$( git branch --points-at HEAD --no-color --format='%(refname:short)' )
          fi
          if [ -z "$_branch" ]; then
              echo ERROR: unable to determine push branch
              git branch -a
              exit 1
          fi
          echo "tagname=$_tagname" >> "$GITHUB_OUTPUT"
          echo "branch=$_branch" >> "$GITHUB_OUTPUT"
          popd

      - name: Build and publish the collection
        shell: bash
        id: build
        run: |
          set -euxo pipefail
          tagname=${{ steps.tag.outputs.tagname }}
          rolename=mssql
          collection_namespace=microsoft
          collection_name=sql
          collection_rolename=server
          dest_path=/var/tmp/collection
          coll_path="$dest_path"/ansible_collections/"$collection_namespace"/"$collection_name"

          echo ::group::Update galaxy.yml
          sed -i "s/version: .*/version: \"$tagname\"/g" "$rolename"/.collection/galaxy.yml
          echo ::endgroup::

          echo ::group::Remove symlinks in tests/roles
          if [ -d "$rolename"/tests/roles ]; then
              find "$rolename"/tests/roles -type l -exec rm {} \;
              if [ -d "$rolename"/tests/roles/linux-system-roles."$rolename" ]; then
                  rm -r "$rolename"/tests/roles/linux-system-roles."$rolename"
              fi
          fi
          echo ::endgroup::

          echo ::group::Build Collection
          # Ensure there is no dest_path before running release_collection.py
          rm -rf "$dest_path"
          python3 auto-maintenance/lsr_role2collection.py --role "$rolename" \
              --src-path "$rolename" \
              --src-owner linux-system-roles \
              --dest-path "$dest_path" \
              --readme "$rolename"/.collection/README.md \
              --namespace microsoft \
              --collection sql \
              --new-role server \
              --meta-runtime auto-maintenance/lsr_role2collection/runtime.yml

          # Replace remnants of "linux-system-roles.mssql" with collection FQDN
          find "$coll_path"/ -type f -exec \
              sed -e "s/linux-system-roles[.]%$rolename\\>/$collection_namespace.$collection_name.$collection_rolename/g" \
                  -i {} \;

          # removing dot files/dirs
          rm -r "$coll_path"/.[A-Za-z]*
          rm -r "$coll_path"/tests/"$collection_rolename"/.[A-Za-z]*

          # Copy .ansible-lint to collection dir
          cp "$coll_path"/roles/"$collection_rolename"/.ansible-lint "$coll_path"

          # Copy CHANGELOG.md from collection role to parent collection dir
          cp "$coll_path"/roles/"$collection_rolename"/CHANGELOG.md \
              "$coll_path"

          # Copy galaxy.yml to the collection directory
          cp -p mssql/.collection/galaxy.yml "$coll_path"

          pushd "$coll_path"
          ansible-galaxy collection build
          popd
          echo ::endgroup::
          _tarball="$coll_path"/microsoft-sql-$tagname.tar.gz
          if [ ! -f "${_tarball}" ]; then
            echo ::error::"Did not find tarball to publish: ${_tarball}"
            exit 1
          fi

          echo ::group::Run galaxy-importer against collection tarball
          GALAXY_IMPORTER_CONFIG=auto-maintenance/lsr_role2collection/galaxy-importer.cfg \
            python3 -m galaxy_importer.main \
            "$_tarball"
          echo ::endgroup::

          echo ::group::Publish Collection to Galaxy
          ansible-galaxy collection publish -vv --token "${{ secrets.GALAXY_API_KEY }}" "$_tarball"
          echo ::endgroup::
          echo ::info Done

      - name: Create tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.tag.outputs.tagname }}
          tag_prefix: ''

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.tagname }}
          name: Version ${{ steps.tag.outputs.tagname }}
          bodyFile: ./.tagmsg.txt
          makeLatest: true
